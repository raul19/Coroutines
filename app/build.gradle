apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply from: "../detekt.gradle"

apply plugin: "de.mannodermaus.android-junit5"

def cfg = rootProject.ext.configuration
def libs = rootProject.ext.libraries
def STRING = "String"

android {
    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        applicationId cfg.applicationId
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode getDate().toBigInteger()
        versionName "${cfg.version_versionMajor}.${cfg.version_versionMinor}.${cfg.version_versionPatch}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            applicationIdSuffix ".dev"
            matchingFallbacks = ['release']
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    bundle {
        density {
            enableSplit true
        }

        abi {
            enableSplit true
        }

        language {
            enableSplit false
        }
    }
}

preBuild.dependsOn detekt

dependencies {
    implementation project(':data')
    implementation project(':domain')
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${libs.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${libs.coroutines}"

    // Test JUnit5 & mockk
    testImplementation "org.junit.jupiter:junit-jupiter-api:${libs.junit5}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${libs.junit5}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${libs.junitJupiterParams}"
    testImplementation "junit:junit:${libs.junit}"
    testImplementation "org.junit.vintage:junit-vintage-engine:${libs.junitVintage}"
    testImplementation "io.mockk:mockk:${libs.mockk}"
    androidTestImplementation "io.mockk:mockk-android:${libs.mockk}"
    androidTestImplementation "androidx.arch.core:core-testing:${libs.coreTesting}"

    // AndroidX
    implementation "androidx.appcompat:appcompat:${libs.appCompat}"
    implementation "androidx.constraintlayout:constraintlayout:${libs.constraint}"
    androidTestImplementation "androidx.test.ext:junit:${libs.testrunner}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${libs.espresso}"
    implementation "androidx.multidex:multidex:${libs.multidex}"
    implementation "androidx.lifecycle:lifecycle-extensions:${libs.lifecycleExtensions}"
    implementation "androidx.room:room-runtime:${libs.room}"
    implementation "androidx.core:core-ktx:${libs.ktx}"

    implementation "com.google.android.material:material:${libs.material}"
    detekt "io.gitlab.arturbosch.detekt:detekt-cli:${libs.detekt}"

    // Dagger 2
    implementation "com.google.dagger:dagger:${libs.dagger}"
    implementation "com.google.dagger:dagger-android:${libs.dagger}"
    implementation "com.google.dagger:dagger-android-support:${libs.dagger}"
    kapt "com.google.dagger:dagger-compiler:${libs.daggercompiler}"
    kapt "com.google.dagger:dagger-android-processor:${libs.daggerprocessor}"

//    // Rx
//    implementation "io.reactivex.rxjava2:rxjava:${libs.rxjava}"
//    implementation "io.reactivex.rxjava2:rxandroid:${libs.rxandroid}"
//    implementation "io.reactivex.rxjava2:rxkotlin:${libs.rxkotlin}"

    // Glide
    implementation "com.github.bumptech.glide:glide:${libs.glide}"
    implementation 'de.hdodenhof:circleimageview:3.0.0'
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyMMddHHmm')
    def file = new File(project.rootDir, 'version.properties')
    file.write(formattedDate)
    return formattedDate
}
